package actions

import (
	"fmt"
	"github.com/gofrs/uuid"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"

	"solution_saver/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Problem)
// DB Table: Plural (problems)
// Resource: Plural (Problems)
// Path: Plural (/problems)
// View Template Folder: Plural (/templates/problems/)

// ProblemsResource is the resource for the Problem model
type ProblemsResource struct {
	buffalo.Resource
}

// List gets all Problems. This function is mapped to the path
// GET /problems
func (v ProblemsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	problems := &models.Problems{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Problems from the DB for that user
	uid := c.Session().Get("current_user_id")
	if err := q.Where("user_id = ?", uid).All(problems); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("problems", problems)
		return c.Render(http.StatusOK, r.HTML("problems/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(problems))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(problems))
	}).Respond(c)
}

// Show gets the data for one Problem. This function is mapped to
// the path GET /problems/{problem_id}
func (v ProblemsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Problem
	problem := &models.Problem{}

	// To find the Problem the parameter problem_id is used.
	uid := c.Session().Get("current_user_id")
	if err := tx.Where("id = ? AND user_id = ?", c.Param("problem_id"), uid).All(problem); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("problem", problem)

		return c.Render(http.StatusOK, r.HTML("problems/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(problem))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(problem))
	}).Respond(c)
}

// New renders the form for creating a new Problem.
// This function is mapped to the path GET /problems/new
func (v ProblemsResource) New(c buffalo.Context) error {
	problem := &models.Problem{}
	uid := c.Session().Get("current_user_id")
	problem.UserID = uid.(uuid.UUID)
	c.Set("problem", problem)

	return c.Render(http.StatusOK, r.HTML("problems/new.plush.html"))
}

// Create adds a Problem to the DB. This function is mapped to the
// path POST /problems
func (v ProblemsResource) Create(c buffalo.Context) error {
	// Allocate an empty Problem
	problem := &models.Problem{}
	uid := c.Session().Get("current_user_id")
	problem.UserID = uid.(uuid.UUID)
	// Bind problem to the html form elements
	if err := c.Bind(problem); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(problem)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("problem", problem)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("problems/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "problem.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/problems/%v", problem.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(problem))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(problem))
	}).Respond(c)
}

// Edit renders a edit form for a Problem. This function is
// mapped to the path GET /problems/{problem_id}/edit
func (v ProblemsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Problem
	problem := &models.Problem{}

	if err := tx.Find(problem, c.Param("problem_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("problem", problem)
	return c.Render(http.StatusOK, r.HTML("problems/edit.plush.html"))
}

// Update changes a Problem in the DB. This function is mapped to
// the path PUT /problems/{problem_id}
func (v ProblemsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Problem
	problem := &models.Problem{}

	if err := tx.Find(problem, c.Param("problem_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Problem to the html form elements
	if err := c.Bind(problem); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(problem)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("problem", problem)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("problems/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "problem.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/problems/%v", problem.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(problem))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(problem))
	}).Respond(c)
}

// Destroy deletes a Problem from the DB. This function is mapped
// to the path DELETE /problems/{problem_id}
func (v ProblemsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Problem
	problem := &models.Problem{}

	// To find the Problem the parameter problem_id is used.
	if err := tx.Find(problem, c.Param("problem_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(problem); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "problem.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/problems")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(problem))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(problem))
	}).Respond(c)
}
